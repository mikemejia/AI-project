Intro to the Program:	
	The BK tree is a data structure that uses Levenshteins distance algorithm to create a tree using the distances the algorithm produces. Now we could simply just compare each word with the misspelled word which isn’t so bad unless you are trying to compare it to a long list of words such as an entire dictionary. This would me big O(n) which isn’t the best when there are thousands of words. But the BK tree only requires big O(logn) which is a greater improvement over just comparing every single word in the dictionary. In order to create a BK tree I just needed to start with any word and use it as my root node. Afterwards I would add words to the tree based on the Levenshteins distance algorithm.  This would create a path depending on the value returned by the distance algorithm until there was the exact same word or until it would create a new node. 
	Computing the Levenshtein distance we can use a matrix which will hold all of the Levenshtein distances between all of the prefixes of the first string and all of the prefixes of the second string. Afterwards we would be able to compute the values in the matrix to find the distance between the entire two strings and place it as the last value in the matrix. The way to do this is by dynamic programming which is the method of solving complex problems and breaking them down into a smaller collection of simpler problems. Dynamic programming algorithms are used for optimization, it will look at the previous sub problems and will combine all of their solutions to generate the best solution for that problem. Which is what we are trying to accomplish using the BK-tree, breaking down the problem to smaller manageable problems and grouping the answers at the end. 

Program itself:
	Once the Package line is removed. Compile the project and run it. Open the Words txt document that contains the list of english words. then just type and see if your word was spelled correctly.
	
	